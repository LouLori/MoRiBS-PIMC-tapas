      subroutine vcord(Eulang,RCOM,RpH2,vtable,vpot,radret,theret,
     +                 chiret,hatx,haty,hatz,ivcord)
c ... this program reads the coordinates of centre of mass of water and pH2,
c ... and three Euler angles of water, and returns the direction unit vectors
c ... for the three axes in water fixed frame and R, theta, chi for potential
c ... calculation.  ivcord determines whether the subroutine is run till the end.
c ... For only calculating hatx, haty, and hatz, the code does NOT need to go to the end.
c ... ivcord=0 goes to the end. ivcord=1 returns after hat(x,y,z) are calculated.
c ... NB: The angles are in RADIA, the coordinates are in ANGSTROM, and the potnetial are in KELVIN
      implicit double precision(a-h,o-z)

      dimension rotmat(3,3),ROsf(3),R1sf(3),R2sf(3),ROwf(3),R1wf(3),
     +          R2wf(3),RHsf(3),hatz(3),haty(3),hatx(3),RCOM(3),RpH2(3),
     +          Eulang(3),RH2COM(3),vec1(3),vec2(3),vec3(3)
      dimension vtable(0:8251970)
      parameter (pi=3.14159265358979323846d0,zero=0.d0,small=1.d-08,
     +           bo2ang=0.529177249d0)
c ... WFF coordinates in bohr
c     data ROwf/zero,zero,0.124d0/,R1wf/1.428d0,zero,-0.987d0/,
c    +     R2wf/-1.428d0,zero,-0.987d0/
c ... WFF coordinates in Angs
      data ROwf/zero,zero,0.06562d0/,R1wf/0.7557d0,zero,-0.5223d0/,
     +     R2wf/-0.7557d0,zero,-0.5223d0/

c ... Eulang: three Euler angles, 1: phi, 2: theta: 3: chi
c ... rotmat: rotational matrix of the three Euler angles
c ... all lengths are in units of Angstrom, and all angles in radian

c     write(6,*)'punch in three Euler angles in degrees'
c     read(5,*)(Eulang(i),i=1,3)
c ... convert to Radia
c     do i=1,3
c       Eulang(i)=Eulang(i)*Pi/180.d0
c     enddo

c ... prepare the rotational matrix
      call matpre(Eulang,rotmat)
c     write(6,*)'rotational matrix:'
c     do i=1,3
c       write(6,*)(rotmat(i,j),j=1,3)
c     enddo

c     write(6,*)'punch in the coordinates of water COM'
c     read(5,*)(RCOM(i),i=1,3)
c     write(6,*)'punch in the coordinates of pH2'
c     read(5,*)(RpH2(i),i=1,3)
c     write(6,*)'coordinates of RCOM'
c     write(6,'(3f10.5)')(RCOM(i),i=1,3)
c     write(6,*)'coordinates of pH2'
c     write(6,'(3f10.5)')(RpH2(i),i=1,3)

c ... obtain the SFF coordinates
      call rottrn(rotmat,ROwf,ROsf,RCOM)
      call rottrn(rotmat,R1wf,R1sf,RCOM)
      call rottrn(rotmat,R2wf,R2sf,RCOM)

c     write(6,*)'O SFF coordinates:'
c     write(6,'(3f10.5)')(ROsf(i),i=1,3)
c     write(6,*)'H1 SFF coordinates:'
c     write(6,'(3f10.5)')(R1sf(i),i=1,3)
c     write(6,*)'H2 SFF coordinates:'
c     write(6,'(3f10.5)')(R2sf(i),i=1,3)

c ... calculate the bond lengths and bond angle to check invariance
c ... by rotation
c     bho1wf=zero
c     bho2wf=zero
c     bho1sf=zero
c     bho2sf=zero
c     do i=1,3
c       bho1wf=bho1wf+(ROwf(i)-R1wf(i))*(ROwf(i)-R1wf(i))
c       bho2wf=bho2wf+(ROwf(i)-R2wf(i))*(ROwf(i)-R2wf(i))
c       bho1sf=bho1sf+(ROsf(i)-R1sf(i))*(ROsf(i)-R1sf(i))
c       bho2sf=bho2sf+(ROsf(i)-R2sf(i))*(ROsf(i)-R2sf(i))
c     enddo
c     bho1wf=sqrt(bho1wf)
c     bho2wf=sqrt(bho2wf)
c     bho1sf=sqrt(bho1sf)
c     bho2sf=sqrt(bho2sf)
c     write(6,'(2(a,f10.5,1x))')'bho1wf=',bho1wf,'bho2wf=',bho2wf
c     write(6,'(2(a,f10.5,1x))')'bho1sf=',bho1sf,'bho2sf=',bho2sf
c     delb1=abs(bho1wf-bho1sf)
c     delb2=abs(bho2wf-bho2sf)
c     if(delb1.gt.small.or.delb2.gt.small) then
c       write(6,*)'too large bond lenth deviation',delb1,delb2
c       stop
c     endif
c     dotwf=zero
c     dotsf=zero
c     do i=1,3
c       dotwf=dotwf+(R1wf(i)-ROwf(i))*(R2wf(i)-ROwf(i))
c       dotsf=dotsf+(R1sf(i)-ROsf(i))*(R2sf(i)-ROsf(i))
c     enddo
c     coswf=dotwf/(bho1wf*bho2wf)
c     cossf=dotsf/(bho1sf*bho2sf)
c     delcos=abs(coswf-cossf)
c     if(delcos.gt.small) then
c       write(6,*)'too large bond angle deviation',delcos
c     endif

c     do i=1,3
c       vec1(i)=R1wf(i)-ROwf(i)
c       vec2(i)=R2wf(i)-ROwf(i)
c     enddo
c     write(6,*)'angHOH in WFF (degrees)',dotang(vec1,vec2)*180d0/Pi
c     do i=1,3
c       vec1(i)=R1sf(i)-ROsf(i)
c       vec2(i)=R2sf(i)-ROsf(i)
c     enddo
c     write(6,*)'angHOH in SFF (degrees)',dotang(vec1,vec2)*180d0/Pi

      do i=1,3
        RH2COM(i)=RpH2(i)-RCOM(i)
      enddo

c ... calculate the direction of the z-axis in WFF
      do i=1,3
        hatz(i)=ROsf(i)-RCOM(i)
      enddo
      dnormz=dnorm(hatz)
      do i=1,3
        hatz(i)=hatz(i)/dnormz
      enddo
c     write(6,'(a,3f10.5)')'z-unit vector',(hatz(i),i=1,3)
c ... calculate the direction of the y-axis in WFF
      crsang=dotang(ROwf,R1wf)
c     write(6,*)crsang*180d0/Pi
      do i=1,3
        vec1(i)=ROsf(i)-RCOM(i)
        vec2(i)=R1sf(i)-RCOM(i)
      enddo
      call crsprd(vec1,vec2,haty)
      do i=1,3
        haty(i)=haty(i)/(dnorm(ROwf)*dnorm(R1wf)*sin(crsang))
      enddo
c     write(6,'(a,3f10.5)')'y-unit vector',(haty(i),i=1,3)
c ... calculate the direction of the x-axis in WFF
      call crsprd(haty,hatz,hatx)
c     write(6,'(a,3f10.5)')'WFF x-unit vector',(hatx(i),i=1,3)
c     write(6,'(a,3f10.5)')'WFF y-unit vector',(haty(i),i=1,3)
c     write(6,'(a,3f10.5)')'WFF z-unit vector',(hatz(i),i=1,3)
      if(ivcord.eq.1) return

c ... calculate thewff and chiwff
      thewff=dotang(hatz,RH2COM)
c     write(6,*)thewff*180d0/Pi
      tanchi=dotprd(RH2COM,haty)/dotprd(RH2COM,hatx)
c ... chiwff maps the chi into the first quadrant to have the C2v
c ... symmetrically unique chi
      chiwff=atan(abs(tanchi))
c     write(6,*)chiwff*180d0/Pi
      radwff=dnorm(RH2COM)
c     write(6,*)radwff,radwff/bo2ang
c ... prepare r (Angs), theta (Radian), and chi (Radian) that are returned for density binning
      radret=radwff
      theret=thewff
      Rdotx=dotprd(RH2COM,hatx)
      Rdoty=dotprd(RH2COM,haty)
      if(Rdotx.ge.0.d0.and.Rdoty.ge.0.d0) then
        chiret=chiwff
      elseif(Rdotx.lt.0.d0.and.Rdoty.ge.0.d0) then
        chiret=Pi-chiwff
      elseif(Rdotx.lt.0.d0.and.Rdoty.lt.0.d0) then
        chiret=Pi+chiwff
      else
        chiret=2*Pi-chiwff
      endif
c ... convert radwff to the unit of bohr
      radwff=radwff/bo2ang
c ... convert thewff and chiwff to degree
      thewff=thewff*180.d0/pi
      chiwff=chiwff*180.d0/pi
c     write(6,*)radwff,thewff,chiwff

      call vcalc(radwff,thewff,chiwff,vtable,vpot)
c     write(6,*)vpot

      end
c-----------------------------------------------------------------------
c     subroutine matpre(Eulang,rotmat)
c     implicit double precision(a-h,o-z)

c     dimension Eulang(3),rotmat(3,3)

c     phi=Eulang(1)
c     theta=Eulang(2)
c     chi=Eulang(3)

c     cp=cos(phi)
c     sp=sin(phi)
c     ct=cos(theta)
c     st=sin(theta)
c     ck=cos(chi)
c     sk=sin(chi)

c     rotmat(1,1)=cp*ct*ck-sp*sk
c     rotmat(1,2)=-cp*ct*sk-sp*ck
c     rotmat(1,3)=cp*st
c     rotmat(2,1)=sp*ct*ck+cp*sk
c     rotmat(2,2)=-sp*ct*sk+cp*ck
c     rotmat(2,3)=sp*st
c     rotmat(3,1)=-st*ck
c     rotmat(3,2)=st*sk
c     rotmat(3,3)=ct

c     return
c     end
c-----------------------------------------------------------------------
c     subroutine rottrn(rotmat,rwf,rsf,rcom)
c     implicit double precision(a-h,o-z)
c     dimension rotmat(3,3),rwf(3),rsf(3),rcom(3)

c     do i=1,3
c       rsf(i)=rcom(i)
c       do j=1,3
c         rsf(i)=rsf(i)+rotmat(i,j)*rwf(j)
c       enddo
c     enddo

c     return
c     end
c-----------------------------------------------------------------------
      subroutine crsprd(vec1,vec2,vec3)
      implicit double precision(a-h,o-z)
      dimension vec1(3),vec2(3),vec3(3)
c ... vec3 = vec1 cross vec2
      vec3(1)=vec1(2)*vec2(3)-vec1(3)*vec2(2)
      vec3(2)=vec1(3)*vec2(1)-vec1(1)*vec2(3)
      vec3(3)=vec1(1)*vec2(2)-vec1(2)*vec2(1)

      return
      end
c-----------------------------------------------------------------------
      double precision function dotprd(vec1,vec2)
      implicit double precision(a-h,o-z)
      dimension vec1(3),vec2(3)
c ... dot=vec1 dot vec2
      dotprd=0.d0
      do i=1,3
        dotprd=dotprd+vec1(i)*vec2(i)
      enddo

      return
      end
c-----------------------------------------------------------------------
      double precision function dnorm(vec)
      implicit double precision(a-h,o-z)
      dimension vec(3)

      dnorm=dotprd(vec,vec)
      dnorm=sqrt(dnorm)

      return
      end
c-----------------------------------------------------------------------
      double precision function dotang(vec1,vec2)
      implicit double precision(a-h,o-z)
      dimension vec1(3),vec2(3)
c ... returns the cross angle between two vectors in radian

      dotang=dotprd(vec1,vec2)/(dnorm(vec1)*dnorm(vec2))
c ... the following two lines eliminate the out of range case
      if(dotang.gt.1.d0) dotang=1.d0
      if(dotang.lt.-1.d0)dotang=-1.d0
      dotang=acos(dotang)

      return
      end


c-----------------------------------------------------------------------
      subroutine rflmfy(rcom,hatx,haty,hatz,eulang)
c ... reflect MF molecule wrt the SFF XZ plane and reflect wrt the MFF xz plane
c     implicit double precision(a-h,o-z)
      implicit none
      double precision zero,theta2,sint,sphi,small,schi,rotma2,pi,phi2,
     +                 hatzp,hatxp,cphi,cost,chi2,cchi,eulang,hatz,haty,
     +                 hatx,rcom,small1,small2

      integer i

      dimension rcom(3),hatx(3),haty(3),hatz(3),eulang(3),hatxp(3),
     +          hatzp(3),rotma2(3,3)
      parameter(pi=3.14159265358979323846d0,zero=0.d0,small=1.d-08,
     +          small1=1.d-02,small2=1.d-08)

c     write(6,*)'in F'
c     do i=1,3
c       write(6,*)rcom(i),hatx(i),haty(i),hatz(i),eulang(i)
c     enddo

c ... reflect MFF x and z
      hatx(2)=-hatx(2)
      hatz(2)=-hatz(2)

c ... calculate MFF y by cross product to maintain the right-handed coordinate
c     write(6,*)'before haty',(haty(i),i=1,3)
      call crsprd(hatz,hatx,haty)
c     write(6,*)'after haty',(haty(i),i=1,3)

c ... make the rotational matrix from the reflected x,y,z
      do i=1,3
        rotma2(i,1)=hatx(i)
        rotma2(i,2)=haty(i)
        rotma2(i,3)=hatz(i)
      enddo

c ... borrow code from deleul in rotden.f
      cost=rotma2(3,3)
      call within(cost)
      theta2=acos(cost)

      sint=sin(theta2)
      if(abs(1.d0-cost).lt.small) then
c ... theta=0
        phi2=0.d0
        cchi=rotma2(1,1)
        schi=rotma2(2,1)
        call within(cchi)
        call within(schi)
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      elseif(abs(1.d0+cost).lt.small) then
c ... theta=pi
        phi2=0.d0
        cchi=rotma2(2,2)
        schi=rotma2(1,2)
        call within(cchi)
        call within(schi)
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      else
c ... normal theta
        cphi=rotma2(1,3)/sint
        sphi=rotma2(2,3)/sint
        cchi=-rotma2(3,1)/sint
        schi=rotma2(3,2)/sint
        call within(cphi)
        call within(sphi)
        call within(cchi)
        call within(schi)
        if(sphi.gt.zero) then
          phi2=acos(cphi)
        else
          phi2=2.0*Pi-acos(cphi)
        endif
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      endif

c ... return angles in radia
      Eulang(1)=phi2
      Eulang(2)=theta2
      Eulang(3)=chi2
c     write(6,*)'in F:',Eulang(1),cos(Eulang(2)),Eulang(3)

      return
      end
c-----------------------------------------------------------------------
      subroutine rflmfx(rcom,hatx,haty,hatz,eulang)
c ... reflect MF molecule wrt the SFF XZ plane and reflect wrt the MFF yz plane
c     implicit double precision(a-h,o-z)
      implicit none
      double precision zero,theta2,sint,sphi,small,schi,rotma2,pi,phi2,
     +                 hatzp,hatxp,cphi,cost,chi2,cchi,eulang,hatz,haty,
     +                 hatx,rcom,small1,small2

      integer i

      dimension rcom(3),hatx(3),haty(3),hatz(3),eulang(3),hatxp(3),
     +          hatzp(3),rotma2(3,3)
      parameter(pi=3.14159265358979323846d0,zero=0.d0,small=1.d-08,
     +          small1=1.d-02,small2=1.d-08)

c     write(6,*)'in F'
c     do i=1,3
c       write(6,*)rcom(i),hatx(i),haty(i),hatz(i),eulang(i)
c     enddo

c ... reflect MFF y and z
      haty(2)=-haty(2)
      hatz(2)=-hatz(2)

c ... calculate MFF y by cross product to maintain the right-handed coordinate
c     write(6,*)'before haty',(haty(i),i=1,3)
      call crsprd(haty,hatz,hatx)
c     write(6,*)'after haty',(haty(i),i=1,3)

c ... make the rotational matrix from the reflected x,y,z
      do i=1,3
        rotma2(i,1)=hatx(i)
        rotma2(i,2)=haty(i)
        rotma2(i,3)=hatz(i)
      enddo

c ... borrow code from deleul in rotden.f
      cost=rotma2(3,3)
      call within(cost)
      theta2=acos(cost)

      sint=sin(theta2)
      if(abs(1.d0-cost).lt.small) then
c ... theta=0
        phi2=0.d0
        cchi=rotma2(1,1)
        schi=rotma2(2,1)
        call within(cchi)
        call within(schi)
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      elseif(abs(1.d0+cost).lt.small) then
c ... theta=pi
        phi2=0.d0
        cchi=rotma2(2,2)
        schi=rotma2(1,2)
        call within(cchi)
        call within(schi)
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      else
c ... normal theta
        cphi=rotma2(1,3)/sint
        sphi=rotma2(2,3)/sint
        cchi=-rotma2(3,1)/sint
        schi=rotma2(3,2)/sint
        call within(cphi)
        call within(sphi)
        call within(cchi)
        call within(schi)
        if(sphi.gt.zero) then
          phi2=acos(cphi)
        else
          phi2=2.0*Pi-acos(cphi)
        endif
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      endif

c ... return angles in radia
      Eulang(1)=phi2
      Eulang(2)=theta2
      Eulang(3)=chi2
c     write(6,*)'in F:',Eulang(1),cos(Eulang(2)),Eulang(3)

      return
      end
c-----------------------------------------------------------------------
      subroutine rflmfz(rcom,hatx,haty,hatz,eulang)
c ... reflect MF molecule wrt the SFF XZ plane and reflect wrt the MFF yz plane
c     implicit double precision(a-h,o-z)
      implicit none
      double precision zero,theta2,sint,sphi,small,schi,rotma2,pi,phi2,
     +                 hatzp,hatxp,cphi,cost,chi2,cchi,eulang,hatz,haty,
     +                 hatx,rcom,small1,small2

      integer i

      dimension rcom(3),hatx(3),haty(3),hatz(3),eulang(3),hatxp(3),
     +          hatzp(3),rotma2(3,3)
      parameter(pi=3.14159265358979323846d0,zero=0.d0,small=1.d-08,
     +          small1=1.d-02,small2=1.d-08)

c     write(6,*)'in F'
c     do i=1,3
c       write(6,*)rcom(i),hatx(i),haty(i),hatz(i),eulang(i)
c     enddo

c ... reflect MFF y and z
      hatx(2)=-hatx(2)
      haty(2)=-haty(2)

c ... calculate MFF y by cross product to maintain the right-handed coordinate
c     write(6,*)'before haty',(haty(i),i=1,3)
      call crsprd(hatx,haty,hatz)
c     write(6,*)'after haty',(haty(i),i=1,3)

c ... make the rotational matrix from the reflected x,y,z
      do i=1,3
        rotma2(i,1)=hatx(i)
        rotma2(i,2)=haty(i)
        rotma2(i,3)=hatz(i)
      enddo

c ... borrow code from deleul in rotden.f
      cost=rotma2(3,3)
      call within(cost)
      theta2=acos(cost)

      sint=sin(theta2)
      if(abs(1.d0-cost).lt.small) then
c ... theta=0
        phi2=0.d0
        cchi=rotma2(1,1)
        schi=rotma2(2,1)
        call within(cchi)
        call within(schi)
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      elseif(abs(1.d0+cost).lt.small) then
c ... theta=pi
        phi2=0.d0
        cchi=rotma2(2,2)
        schi=rotma2(1,2)
        call within(cchi)
        call within(schi)
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      else
c ... normal theta
        cphi=rotma2(1,3)/sint
        sphi=rotma2(2,3)/sint
        cchi=-rotma2(3,1)/sint
        schi=rotma2(3,2)/sint
        call within(cphi)
        call within(sphi)
        call within(cchi)
        call within(schi)
        if(sphi.gt.zero) then
          phi2=acos(cphi)
        else
          phi2=2.0*Pi-acos(cphi)
        endif
        if(schi.gt.zero) then
          chi2=acos(cchi)
        else
          chi2=2.0*Pi-acos(cchi)
        endif
      endif

c ... return angles in radia
      Eulang(1)=phi2
      Eulang(2)=theta2
      Eulang(3)=chi2
c     write(6,*)'in F:',Eulang(1),cos(Eulang(2)),Eulang(3)

      return
      end

